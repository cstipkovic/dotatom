function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _specHelpers = require('./spec-helpers');

var _specHelpers2 = _interopRequireDefault(_specHelpers);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libBuilder = require('../lib/builder');

var _libBuilder2 = _interopRequireDefault(_libBuilder);

'use babel';

describe('Builder', function () {
  var builder = undefined,
      fixturesPath = undefined,
      filePath = undefined,
      logFilePath = undefined;

  beforeEach(function () {
    builder = new _libBuilder2['default']();
    fixturesPath = _specHelpers2['default'].cloneFixtures();
    filePath = _path2['default'].join(fixturesPath, 'file.tex');
    logFilePath = _path2['default'].join(fixturesPath, 'file.log');
  });

  describe('constructPath', function () {
    it('reads `latex.texPath` as configured', function () {
      spyOn(atom.config, 'get').andReturn();
      builder.constructPath();

      expect(atom.config.get).toHaveBeenCalledWith('latex.texPath');
    });

    it('uses platform default when `latex.texPath` is not configured', function () {
      var defaultTexPath = '/foo/bar';
      var expectedPath = [defaultTexPath, process.env.PATH].join(_path2['default'].delimiter);
      atom.config.set('latex.texPath', '');
      spyOn(builder, 'defaultTexPath').andReturn(defaultTexPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces surrounded $PATH with process.env.PATH', function () {
      var texPath = '/foo:$PATH:/bar';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces leading $PATH with process.env.PATH', function () {
      var texPath = '$PATH:/bar';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('replaces trailing $PATH with process.env.PATH', function () {
      var texPath = '/foo:$PATH';
      var expectedPath = texPath.replace('$PATH', process.env.PATH);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });

    it('prepends process.env.PATH with texPath', function () {
      var texPath = '/foo';
      var expectedPath = [texPath, process.env.PATH].join(_path2['default'].delimiter);
      atom.config.set('latex.texPath', texPath);

      var constructedPath = builder.constructPath();
      expect(constructedPath).toBe(expectedPath);
    });
  });

  describe('parseLogFile', function () {
    var logParser = undefined;

    beforeEach(function () {
      logParser = jasmine.createSpyObj('MockLogParser', ['parse']);
      spyOn(builder, 'getLogParser').andReturn(logParser);
    });

    it('resolves the associated log file path by invoking @resolveLogFilePath', function () {
      spyOn(builder, 'resolveLogFilePath').andReturn('foo.log');

      builder.parseLogFile(filePath, null);
      expect(builder.resolveLogFilePath).toHaveBeenCalledWith(filePath, null);
    });

    it('returns null if passed a file path that does not exist', function () {
      filePath = '/foo/bar/quux.tex';
      var result = builder.parseLogFile(filePath, null);

      expect(result).toBeNull();
      expect(logParser.parse).not.toHaveBeenCalled();
    });

    it('attempts to parse the resolved log file', function () {
      builder.parseLogFile(filePath);

      expect(builder.getLogParser).toHaveBeenCalledWith(logFilePath);
      expect(logParser.parse).toHaveBeenCalled();
    });
  });

  describe('getLatexEngineFromMagic', function () {
    it('detects program magic and outputs correct engine', function () {
      var filePath = _path2['default'].join(fixturesPath, 'magic-comments', 'latex-engine.tex');
      expect(builder.getLatexEngineFromMagic(filePath)).toEqual('pdflatex');
    });
  });

  describe('getJobNamesFromMagic', function () {
    it('detects program magic and outputs jobnames', function () {
      var filePath = _path2['default'].join(fixturesPath, 'magic-comments', 'latex-jobnames.tex');
      expect(builder.getJobNamesFromMagic(filePath)).toEqual(['foo', 'bar']);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/cin_chalic/.atom/packages/latex/spec/builder-spec.js
