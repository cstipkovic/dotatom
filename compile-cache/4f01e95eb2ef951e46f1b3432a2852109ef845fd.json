{".source.js":{"Factory":{"prefix":"_fc","body":"(function() {\n\n  'use strict';\n\n  var app = angular.module('nova'),\n      factoryId = '${1:name}CollectionFactory';\n\n  app.factory(factoryId, ['config', 'Restangular', '$q', '${1:name}ModelFactory', factory]);\n\n  function factory(config, restangular, $q, ${1:name}ModelFactory) {\n\n    var baseUrl = config.endpoints.${2:inventory};\n\n    function ${4:class}() {\n      this._initialize();\n    }\n\n    ${4:class}.prototype = {\n\n      ///////////////////////////////////////////////\n      // Public Methods                            //\n      ///////////////////////////////////////////////\n\n      _cache: [],\n\n      ///////////////////////////////////////////////\n      // Public Methods                            //\n      ///////////////////////////////////////////////\n\n      /**\n      * Search for ${1:name}s\n      *\n      * @method search\n      **/\n      search: function(payload) {\n        return this._search(payload);\n      },\n      /**\n      * Remove a ${1:name}\n      *\n      * @method remove\n      **/\n      remove: function(${1:name}) {\n        ${1:name}.remove().then(function() {\n          _.remove(this._cache, ${1:name});\n        });\n      },\n\n      ///////////////////////////////////////////////\n      // Private Methods                           //\n      ///////////////////////////////////////////////\n\n      /**\n      * Initialize ${1:name}s\n      *\n      * @private\n      * @method _initialize\n      **/\n      _initialize: function() {\n\n      },\n\n\n      ///////////////////////////////////////////////\n      // Server Calls                              //\n      ///////////////////////////////////////////////\n\n      /**\n      * Call server search\n      *\n      * @private\n      * @method _search\n      * @param {payload} search parameters\n      **/\n      _search: function(payload) {\n        var that = this, d = $q.defer();\n\n        restangular.setBaseUrl(baseUrl)\n          .one('${1:name}s')\n          .get(payload).then(function(response) {\n            // wrap the results into ${1:name}'s objects\n            that._cache = [];\n            var promises = _.map(response.results, function(raw${1:name}) {\n              return new ${1:name}ModelFactory.${3:entity}(raw${1:name}).then(function(${1:name}) {\n                that._cache.push(${1:name});\n              });\n            });\n            $q.all(that._cache).then(function() {\n              d.resolve({\n                total: response.total,\n                results: that._cache\n              });\n            });\n\n          });\n\n        return d.promise;\n      },\n\n    }\n\n    return {\n      ${4:class}: ${4:class}\n    }\n  }\n})();"}}}