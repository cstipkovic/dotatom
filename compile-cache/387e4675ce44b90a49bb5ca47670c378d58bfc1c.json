{".source.js":{"Factory":{"prefix":"_fe","body":"(function() {\n\n  'use strict';\n\n  var app = angular.module('nova'),\n      factoryId = '${1:name}ModelFactory';\n\n  app.factory(factoryId, ['config', 'Restangular', '$q', factory]);\n\n  function factory(config, restangular, $q) {\n\n    var defaultValues = {};\n\n    function ${2:entity}(parameter) {\n      return this._initialize(parameter);\n    };\n\n    ${2:entity}.prototype = {\n\n      ///////////////////////////////////////////////\n      // Public Members                            //\n      ///////////////////////////////////////////////\n\n      /**\n      * Save ${2:name} changes\n      *\n      * @method save\n      **/\n      save: function() {\n        if (this.id) {\n          return this._update${2:entity}();\n        } else {\n          return this._create${2:entity}();\n        }\n      },\n      /**\n      * Remove ${2:name}\n      *\n      * @method remove\n      **/\n      remove: function() {\n        return this._remove${2:entity}();\n      },\n\n      ///////////////////////////////////////////////\n      // Private Members                           //\n      ///////////////////////////////////////////////\n\n      /**\n      * Defines base end point for the server calls\n      *\n      * @private\n      * @property\n      **/\n      _baseEndpoint: config.endpoints.inventory,\n      /**\n      * Initialize entity\n      *\n      * @private\n      * @method _initialize\n      * @param {parameter} this can be in three different forms: id, object or no parameters (undefined)\n      **/\n      _initialize: function(parameter) {\n        var d = $q.defer(),\n            id = +parameter;\n\n        // If the user pass an integer as parameter then get the ${1:name} from the server\n        if (id) {\n          this.id = id;\n          this._get${2:entity}ById(this.id).then(function(${1:name}) {\n            this.details = ${1:name};\n            d.resolve(this);\n          });\n        // if the user pass an object then make get its data and wrap it into the details property\n        } else if (_.isObject(parameter)) {\n          this.details = parameter;\n          // we need to move the id outside the details\n          this.id = parameter.id;\n          delete parameter.id;\n          d.resolve(this);\n        // if it is undefined then create a new object\n        } else if (!parameter) {\n          // initialize default values for a new ${1:name}\n          this.details = _.cloneDeep(defaultValues);\n          d.resolve(this);\n        }\n\n        return d.promise;\n      },\n      /**\n      * Returns a ${2:entity} object from a raw data object received from the server\n      *\n      * @private\n      * @method _getFromRawData\n      * @param {rawData} ${1:name}'s raw data\n      **/\n      _getFromRawData: function(rawData) {\n        if (!_.isObject(rawData))\n          throw(\"In order to get a ${2:entity} from raw data you need to supply the raw data as an object\");\n        return new ${2:entity}(rawData);\n      },\n\n      ///////////////////////////////////////////////\n      // Server Calls                              //\n      ///////////////////////////////////////////////\n\n      /**\n      * Retrieve a ${1:name} from the server using its id\n      *\n      * @private\n      * @method _get${2:entity}ById\n      **/\n      _get${2:entity}ById: function(id) {\n        return restangular.setBaseUrl(this._baseEndpoint)\n            .one('${1:name}s', id)\n            .get();\n      },\n      /**\n      * Create new ${2:entity}\n      *\n      * @private\n      * @method _create${2:entity}\n      **/\n      _create${2:entity}: function() {\n        return restangular.setBaseUrl(this._baseEndpoint)\n            .all('${1:name}s')\n            .post(this.details);\n      },\n      /**\n      * Update an existent ${1:name}\n      *\n      * @private\n      * @method _update${2:entity}\n      **/\n      _update${2:entity}: function() {\n        return restangular.setBaseUrl(this._baseEndpoint)\n                .one('${1:name}s', this.id)\n                .customPUT(this.details);\n      },\n      /**\n      * Remove ${1:name}\n      *\n      * @private\n      * @method _remove${2:entity}\n      **/\n      _remove${2:entity}: function() {\n        return restangular.setBaseUrl(this._baseEndpoint)\n                .one('${1:name}s', this.id)\n                .remove();\n      },\n\n    }\n\n    return {\n      ${2:entity} : ${2:entity}\n    }\n  }\n})();"}}}