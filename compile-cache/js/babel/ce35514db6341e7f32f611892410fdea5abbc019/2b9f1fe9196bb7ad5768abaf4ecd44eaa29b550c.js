function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

"use babel";

var miPath = path.join(__dirname, 'files', 'missing_import');

describe('The Clang provider for AtomLinter', function () {
  var lint = require('../lib/main').provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return atom.packages.activatePackage("linter-clang");
    });
  });

  it('finds a fatal error in "missing_import.c"', function () {
    waitsForPromise(function () {
      return atom.workspace.open(miPath + '.c').then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
          expect(messages[0].type).toEqual("fatal error");
          expect(messages[0].text).toEqual("'nothing.h' file not found");
        });
      });
    });
  });

  it('finds a fatal error in "missing_import.cpp"', function () {
    waitsForPromise(function () {
      return atom.workspace.open(miPath + '.cpp').then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
          expect(messages[0].type).toEqual("fatal error");
          expect(messages[0].text).toEqual("'nothing.h' file not found");
        });
      });
    });
  });

  it('finds a fatal error in "missing_import.m"', function () {
    waitsForPromise(function () {
      return atom.workspace.open(miPath + '.m').then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
          expect(messages[0].type).toEqual("fatal error");
          expect(messages[0].text).toEqual("'nothing.h' file not found");
        });
      });
    });
  });

  it('finds a fatal error in "missing_import.mm"', function () {
    waitsForPromise(function () {
      return atom.workspace.open(miPath + '.mm').then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(1);
          expect(messages[0].type).toEqual("fatal error");
          expect(messages[0].text).toEqual("'nothing.h' file not found");
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Npbl9jaGFsaWMvLmF0b20vcGFja2FnZXMvbGludGVyLWNsYW5nL3NwZWMvbGludGVyLWNsYW5nLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7b0JBRXNCLE1BQU07O0lBQWhCLElBQUk7O0FBRmhCLFdBQVcsQ0FBQzs7QUFJWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFL0QsUUFBUSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07QUFDbEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQTs7QUFFeEQsWUFBVSxDQUFDLFlBQU07QUFDZixtQkFBZSxDQUFDLFlBQU07QUFDcEIsYUFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQTtLQUNyRCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLDJDQUEyQyxFQUFFLFlBQU07QUFDcEQsbUJBQWUsQ0FBQyxZQUFNO0FBQ3BCLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUN2RCxlQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRLEVBQUk7QUFDbkMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLGdCQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUMvQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUMvRCxDQUFDLENBQUE7T0FDSCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07QUFDdEQsbUJBQWUsQ0FBQyxZQUFNO0FBQ3BCLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUN6RCxlQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRLEVBQUk7QUFDbkMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLGdCQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUMvQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUMvRCxDQUFDLENBQUE7T0FDSCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLDJDQUEyQyxFQUFFLFlBQU07QUFDcEQsbUJBQWUsQ0FBQyxZQUFNO0FBQ3BCLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUN2RCxlQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRLEVBQUk7QUFDbkMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLGdCQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUMvQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUMvRCxDQUFDLENBQUE7T0FDSCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLDRDQUE0QyxFQUFFLFlBQU07QUFDckQsbUJBQWUsQ0FBQyxZQUFNO0FBQ3BCLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUN4RCxlQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRLEVBQUk7QUFDbkMsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLGdCQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUMvQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUMvRCxDQUFDLENBQUE7T0FDSCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL2hvbWUvY2luX2NoYWxpYy8uYXRvbS9wYWNrYWdlcy9saW50ZXItY2xhbmcvc3BlYy9saW50ZXItY2xhbmctc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGJhYmVsXCI7XG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IG1pUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaWxlcycsICdtaXNzaW5nX2ltcG9ydCcpO1xuXG5kZXNjcmliZSgnVGhlIENsYW5nIHByb3ZpZGVyIGZvciBBdG9tTGludGVyJywgKCkgPT4ge1xuICBjb25zdCBsaW50ID0gcmVxdWlyZSgnLi4vbGliL21haW4nKS5wcm92aWRlTGludGVyKCkubGludFxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICByZXR1cm4gYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoXCJsaW50ZXItY2xhbmdcIilcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdmaW5kcyBhIGZhdGFsIGVycm9yIGluIFwibWlzc2luZ19pbXBvcnQuY1wiJywgKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3BlbihtaVBhdGggKyAnLmMnKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIHJldHVybiBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzLmxlbmd0aCkudG9FcXVhbCgxKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0VxdWFsKFwiZmF0YWwgZXJyb3JcIilcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udGV4dCkudG9FcXVhbChcIidub3RoaW5nLmgnIGZpbGUgbm90IGZvdW5kXCIpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2ZpbmRzIGEgZmF0YWwgZXJyb3IgaW4gXCJtaXNzaW5nX2ltcG9ydC5jcHBcIicsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLm9wZW4obWlQYXRoICsgJy5jcHAnKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIHJldHVybiBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzLmxlbmd0aCkudG9FcXVhbCgxKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0VxdWFsKFwiZmF0YWwgZXJyb3JcIilcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udGV4dCkudG9FcXVhbChcIidub3RoaW5nLmgnIGZpbGUgbm90IGZvdW5kXCIpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2ZpbmRzIGEgZmF0YWwgZXJyb3IgaW4gXCJtaXNzaW5nX2ltcG9ydC5tXCInLCAoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKG1pUGF0aCArICcubScpLnRoZW4oZWRpdG9yID0+IHtcbiAgICAgICAgcmV0dXJuIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0VxdWFsKDEpXG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnR5cGUpLnRvRXF1YWwoXCJmYXRhbCBlcnJvclwiKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50ZXh0KS50b0VxdWFsKFwiJ25vdGhpbmcuaCcgZmlsZSBub3QgZm91bmRcIilcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBpdCgnZmluZHMgYSBmYXRhbCBlcnJvciBpbiBcIm1pc3NpbmdfaW1wb3J0Lm1tXCInLCAoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKG1pUGF0aCArICcubW0nKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIHJldHVybiBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzLmxlbmd0aCkudG9FcXVhbCgxKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0VxdWFsKFwiZmF0YWwgZXJyb3JcIilcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udGV4dCkudG9FcXVhbChcIidub3RoaW5nLmgnIGZpbGUgbm90IGZvdW5kXCIpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59KVxuIl19
//# sourceURL=/home/cin_chalic/.atom/packages/linter-clang/spec/linter-clang-spec.js
