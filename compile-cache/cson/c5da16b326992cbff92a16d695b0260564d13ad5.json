{".source.js":{"Controller Stub":{"prefix":"_ce","body":"(function() {\n\n  'use strict';\n\n  var app = angular.module('nova'),\n      controllerId = '${1:entity}Controller';\n\n  app.controller(controllerId, ['$scope', '$state', 'config', 'common', 'events', '${2:name}Factory', controller]);\n\n    function controller($scope, $state, config, common, events, ${2:name}Factory) {\n\n    // initialize controller\n    _initialize();\n\n    ///////////////////////////////////////////////\n    // Event handlers                            //\n    ///////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////\n    // Scope Methods                             //\n    ///////////////////////////////////////////////\n\n    /**\n    * Save ${2:name} changes\n    *\n    * @method save\n    **/\n    $scope.save = function() {\n      $scope.${2:name}.save().then(function() {\n        $state.transitionTo('${2:name}s.listing');\n      });\n    };\n\n    /**\n    * Cancel coupon changes\n    *\n    * @method cancel\n    **/\n    $scope.cancel = function() {\n      modalFactory.open('Discard ${2:name} changes', '', ' Are you sure you want to discard ${2:name} changes?')\n        .then(function() {\n          $state.transitionTo('${2:name}s.listing');\n        });\n    };\n\n    ///////////////////////////////////////////////\n    // Private Methods                           //\n    ///////////////////////////////////////////////\n\n    /**\n    * Initialize controller\n    *\n    * @private\n    * @method _initialize\n    **/\n    function _initialize() {\n      _prepareScope();\n      common.wait([_resolve${1:entity}()], controllerId);\n    };\n    /**\n    * Prepare initial values for the controller's scope\n    *\n    * @private\n    * @method _prepareScope\n    **/\n    function _prepareScope() {\n    };\n    /**\n    * This function will return the right ${2:name} instance depending on which state we are: ${2:name}s.new or ${2:name}s.edit\n    *\n    * @private\n    * @method _resolve${1:entity}\n    **/\n    function _resolve${1:entity}() {\n      // depending on the state\n      var promise;\n      var state = $state.current;\n      if (state.name === '${2:name}s.new') {\n        promise = new ${2:name}Factory.${1:entity}();\n      } else if (state.name === 'coupons.edit') {\n        promise = new ${2:name}Factory.${1:entity}($stateParams.id);\n      }\n\n      promise.then(function(${2:name}) {\n        $scope.${2:name} = ${2:name};\n      });\n\n      return promise;\n    };\n  }\n})();"}}}