(function() {
  var ShowTodo, TodoModel, TodoRegex, path, sample1Path;

  path = require('path');

  TodoModel = require('../lib/todo-model');

  ShowTodo = require('../lib/show-todo');

  TodoRegex = require('../lib/todo-regex');

  sample1Path = path.join(__dirname, 'fixtures/sample1');

  describe("Todo Model", function() {
    var match, todoRegex, _ref;
    _ref = [], match = _ref.match, todoRegex = _ref.todoRegex;
    beforeEach(function() {
      atom.project.setPaths([sample1Path]);
      todoRegex = new TodoRegex(ShowTodo.config.findUsingRegex["default"], ['FIXME', 'TODO']);
      return match = {
        all: " TODO: Comment in C #tag1 ",
        loc: "" + (atom.project.getPaths()[0]) + "/sample1/sample.c",
        regex: todoRegex.regex,
        regexp: todoRegex.regexp,
        position: [[0, 1], [0, 20]]
      };
    });
    describe("Create todo models", function() {
      it("should handle results from workspace scan (also tested in fetchRegexItem)", function() {
        var model;
        delete match.regexp;
        model = new TodoModel(match);
        return expect(model.text).toEqual("TODO: Comment in C");
      });
      it("should remove regex part", function() {
        var model;
        model = new TodoModel(match);
        return expect(model.text).toEqual("Comment in C");
      });
      it("should serialize range, relativize path and extract basename", function() {
        var model;
        model = new TodoModel(match);
        expect(model.path).toEqual('sample1/sample.c');
        expect(model.file).toEqual('sample.c');
        return expect(model.range).toEqual('0,1,0,20');
      });
      it("should handle invalid match position", function() {
        var model;
        delete match.position;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [[0, 1]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1');
        expect(model.position).toEqual([[0, 1]]);
        match.position = [[0, 1], [2, 3]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1,2,3');
        return expect(model.position).toEqual([[0, 1], [2, 3]]);
      });
      it("should handle invalid match position with no matchText", function() {
        var model;
        match.all = "TODO";
        delete match.position;
        model = new TodoModel(match);
        expect(model.text).toEqual('No details');
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = true;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        return expect(model.position).toEqual([[0, 0]]);
      });
      it("should handle dot after todo", function() {
        var model;
        match.all = "// TODO. comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it("should handle semicolon after todo", function() {
        var model;
        match.all = "// TODO; comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it('respects imdone syntax', function() {
        var model;
        match.all = "// TODO:10 todo1";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo1');
      });
      it('respects imdone syntax zero', function() {
        var model;
        match.all = "// TODO:0 todo2";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo2');
      });
      it('handles number in todo', function() {
        var model;
        match.all = "Line 1 //TODO: 1 2 3";
        model = new TodoModel(match);
        return expect(model.text).toBe('1 2 3');
      });
      it('handles number in todo (as long as its not without space)', function() {
        var model;
        match.all = "Line 2 //TODO:1 2 3";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('2 3');
      });
      it('handles empty todos', function() {
        var model;
        match.all = "Line 1 //TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 1');
      });
      it('handles empty todos with other comment characters', function() {
        var model;
        match.all = "Line 2 # TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 2');
      });
      it('handles empty todos with separator', function() {
        var model;
        match.all = "Line 3 // TODO.";
        match.position = [[0, 9], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 3');
      });
      it('handles empty todos with colon separator', function() {
        var model;
        match.all = "Line 4 // TODO:";
        match.position = [[0, 10], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 4');
      });
      it('handles empty block todos', function() {
        var model;
        match.all = "Line 5 /* TODO */ ";
        match.position = [[0, 9], [0, 19]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 5');
      });
      it('handles completely empty todos', function() {
        var model;
        match.all = "// TODO";
        match.position = [[0, 2], [0, 7]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty todos with separator', function() {
        var model;
        match.all = "// TODO.";
        match.position = [[0, 2], [0, 8]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty block todos', function() {
        var model;
        match.all = " /* TODO */ ";
        match.position = [[0, 3], [0, 12]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 1 // @TODO: text 1";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 1');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 2 @TODO: text 2";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 2');
      });
      it('handles tabs in todos', function() {
        var model;
        match.all = "Line //TODO:\ttext";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('handles todo without semicolon', function() {
        var model;
        match.all = "A line // TODO text";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('stops with invalid todos', function() {
        var model, text;
        text = "A line // TODO:text";
        match.all = text;
        model = new TodoModel(match);
        expect(model.type).toBe(void 0);
        return expect(model.text).toBe(text);
      });
      it('extracts project name', function() {
        var model;
        model = new TodoModel(match);
        return expect(model.project).toBe('sample1');
      });
      it('handles non-existing projects', function() {
        var model;
        atom.project.setPaths([]);
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
      return it('handles files not in project', function() {
        var model;
        match.loc = 'nonexisting/sample.c';
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
    });
    describe("Extracting todo tags", function() {
      it("should extract todo tags", function() {
        var model;
        match.text = "test #TODO: 123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "#TODO: 123 #tag1.";
        expect(new TodoModel(match).tags).toBe('tag1');
        match.text = "  TODO: 123 #tag1  ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: 123 #tag1   --> ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: Fix this link. #bug. -->";
        model = new TodoModel(match);
        expect(model.tags).toBe('bug');
        return expect(model.text).toBe('Fix this link.');
      });
      it("should extract multiple todo tags", function() {
        var model;
        match.text = "TODO: 123 #tag1 #tag2 #tag3";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1, tag2, tag3');
        expect(model.text).toBe('123');
        match.text = "test #TODO: 123 #tag1, #tag2";
        expect(new TodoModel(match).tags).toBe('tag1, tag2');
        match.text = "TODO: #123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('123, tag1');
        return expect(model.text).toBe('No details');
      });
      return it("should handle invalid tags", function() {
        match.text = "#TODO: 123 #tag1 X";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: 123 #tag1#";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 todo";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag.123";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 #tag2@";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1, #tag2$, #tag3";
        return expect(new TodoModel(match).tags).toBe('tag3');
      });
    });
    describe("Handling google style guide todo syntax", function() {
      it("adds an id to the model", function() {
        var model;
        match.all = "// TODO(kl@gmail.com): Use a *.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('kl@gmail.com');
        return expect(model.text).toBe('Use a *.');
      });
      it("handles plain name", function() {
        var model;
        match.all = "// TODO(Zeke) change this to use relations.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('Zeke');
        return expect(model.text).toBe('change this to use relations.');
      });
      it("handles spaces", function() {
        var model;
        match.all = "// TODO(bug 12345): remove the \"Last visitors\" feature";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug 12345');
        return expect(model.text).toBe('remove the "Last visitors" feature');
      });
      it("handles parentheses in text", function() {
        var model;
        match.all = "// TODO(bug): another task (seriously)";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug');
        return expect(model.text).toBe('another task (seriously)');
      });
      it("handles long ids with empty todos", function() {
        var model;
        match.all = "// TODO(id: Use a *.)";
        match.position = [[0, 2], [0, 21]];
        model = new TodoModel(match);
        expect(model.id).toBe('id: Use a *.');
        return expect(model.text).toBe('No details');
      });
      it("handles invalid todo id format", function() {
        var model;
        match.all = "// TODO(id: Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id: Use a *.');
      });
      it("handles invalid id with underscore", function() {
        var model;
        match.all = "// TODO _(id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('_(id): Use a *.');
      });
      return it("handles invalid id with space", function() {
        var model;
        match.all = "// TODO (id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id): Use a *.');
      });
    });
    return describe("Model properties", function() {
      it("returns value for key", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get('All')).toBe(match.all);
        expect(model.get('Text')).toBe('Comment in C');
        expect(model.get('Type')).toBe('TODO');
        expect(model.get('Range')).toBe('0,1,0,20');
        expect(model.get('Line')).toBe('1');
        expect(model.get('Regex')).toBe('/\\b(TODO)[:;.,]?\\d*($|\\s.*$|\\(.*$)/g');
        expect(model.get('Path')).toBe('sample1/sample.c');
        expect(model.get('File')).toBe('sample.c');
        expect(model.get('Tags')).toBe('tag1');
        expect(model.get('Id')).toBe('');
        expect(model.get('Project')).toBe('sample1');
        return expect(model.get('RegExp')).toBe(match.regexp);
      });
      it("defaults to text", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get()).toBe('Comment in C');
        expect(model.get('NONEXISTING')).toBe('Comment in C');
        delete match.all;
        delete match.text;
        model = new TodoModel(match);
        expect(model.get()).toBe('No details');
        delete model.all;
        delete model.text;
        return expect(model.get()).toBe('No details');
      });
      return it("searches for strings", function() {
        var model;
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(false);
        atom.config.set('todo-show.showInTable', ['Text', 'Type', 'Line']);
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(true);
        expect(model.contains('1')).toBe(true);
        expect(model.contains('sample.c')).toBe(false);
        expect(model.contains('0,1')).toBe(false);
        expect(model.contains('')).toBe(true);
        return expect(model.contains()).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvY2luX2NoYWxpYy8uYXRvbS9wYWNrYWdlcy90b2RvLXNob3cvc3BlYy90b2RvLW1vZGVsLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGlEQUFBOztBQUFBLEVBQUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBQVAsQ0FBQTs7QUFBQSxFQUVBLFNBQUEsR0FBWSxPQUFBLENBQVEsbUJBQVIsQ0FGWixDQUFBOztBQUFBLEVBR0EsUUFBQSxHQUFXLE9BQUEsQ0FBUSxrQkFBUixDQUhYLENBQUE7O0FBQUEsRUFJQSxTQUFBLEdBQVksT0FBQSxDQUFRLG1CQUFSLENBSlosQ0FBQTs7QUFBQSxFQU1BLFdBQUEsR0FBYyxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQVYsRUFBcUIsa0JBQXJCLENBTmQsQ0FBQTs7QUFBQSxFQVFBLFFBQUEsQ0FBUyxZQUFULEVBQXVCLFNBQUEsR0FBQTtBQUNyQixRQUFBLHNCQUFBO0FBQUEsSUFBQSxPQUFxQixFQUFyQixFQUFDLGFBQUEsS0FBRCxFQUFRLGlCQUFBLFNBQVIsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFiLENBQXNCLENBQUMsV0FBRCxDQUF0QixDQUFBLENBQUE7QUFBQSxNQUNBLFNBQUEsR0FBZ0IsSUFBQSxTQUFBLENBQ2QsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBRCxDQURoQixFQUVkLENBQUMsT0FBRCxFQUFVLE1BQVYsQ0FGYyxDQURoQixDQUFBO2FBTUEsS0FBQSxHQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssNEJBQUw7QUFBQSxRQUNBLEdBQUEsRUFBSyxFQUFBLEdBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQWIsQ0FBQSxDQUF3QixD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

//# sourceURL=/home/cin_chalic/.atom/packages/todo-show/spec/todo-model-spec.coffee
