{"name":"linter-clang","main":"./lib/main","version":"3.4.4","description":"Lint C-based files using clang","repository":{"type":"git","url":"git+https://github.com/AtomLinter/linter-clang.git"},"license":"MIT","engines":{"atom":">0.50.0"},"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"dependencies":{"atom-linter":"^4.5.0","atom-package-deps":"^3.0.8","clang-flags":"^0.2.2"},"packages-deps":["linter"],"eslintConfig":{"env":{"es6":true,"browser":true,"node":true},"ecmaFeatures":{"modules":true},"globals":{"atom":true}},"readme":"# linter-clang\n\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=linux)](https://travis-ci.org/AtomLinter/linter-clang)\n[![Travis.ci Shield](https://img.shields.io/travis/AtomLinter/linter-clang/master.svg?style=flat-square&label=os%20x)](https://travis-ci.org/AtomLinter/linter-clang)\n[![AppVeyor Sheild](https://img.shields.io/appveyor/ci/AtomLinter/linter-clang/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/kepler0/linter-clang)\n\nThis linter plugin for [Linter](https://github.com/AtomLinter/Linter) provides an interface to clang. It will be used with files that have the \"C++\", \"C\", \"Objective-C\" and \"Objective-C++\" syntax.\n\n### Plugin installation\nInstall from the Settings pane of Atom by searching for and installing the `linter-clang` package.\n\nOr install from your Command Prompt by running:\n```\n$ apm install linter-clang\n```\n\nThis package will ensure that all dependencies are installed on activation.\n\n## Project-specific settings\n\n### .clang_complete\nIf your project has some extra include directories, put them in a file called \".clang_complete\" and list them line by line.\nThe linter will open the file and use the specified paths when linting in your project.\n\n```\n-Iinclude\n-Ilib/foo/include\n```\nPlease note the file should contain one command line argument per line.\nThese arguments are passed to clang directly using exec and not via a shell.\nTherefore any spaces are treated as a part of the command line argument.\n\nThis means on the one hand `-I include` results in clang using ` include` (note the space at the beginning) as include directory.\nFor the same reason `-I include -I lib/foo/include` causes clang to search for includes in ` include -I lib/foo/include`.\n\nOn the other hand if your path contains spaces you must not escape them or put quotes around the path.\nFor example: `-Ilib/dir with spaces/include` only works without any quotes or escaping.\n\n### Clang JSON Compilation Database\nThe [Clang JSON Compilation Database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) is also a supported format for project specific settings.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/AtomLinter/linter-clang/issues"},"homepage":"https://github.com/AtomLinter/linter-clang#readme","_id":"linter-clang@3.4.4","_shasum":"2207a6df4e398a3c7435b06e7428878ac0d91dfa","_resolved":"file:../d-116710-21273-l39l7c/package.tgz","_from":"../d-116710-21273-l39l7c/package.tgz"}