(function() {
  var ShowTodoView, TodosCollection, path, sample1Path, sample2Path;

  path = require('path');

  ShowTodoView = require('../lib/todo-view');

  TodosCollection = require('../lib/todo-collection');

  sample1Path = path.join(__dirname, 'fixtures/sample1');

  sample2Path = path.join(__dirname, 'fixtures/sample2');

  describe("Show Todo View", function() {
    var collection, showTodoView, _ref;
    _ref = [], showTodoView = _ref[0], collection = _ref[1];
    beforeEach(function() {
      var uri;
      atom.config.set('todo-show.findTheseTodos', ['TODO']);
      atom.config.set('todo-show.findUsingRegex', '/\\b(${TODOS}):?\\d*($|\\s.*$)/g');
      atom.project.setPaths([sample1Path]);
      collection = new TodosCollection;
      uri = 'atom://todo-show/todos';
      showTodoView = new ShowTodoView(collection, uri);
      return waitsFor(function() {
        return !showTodoView.isSearching();
      });
    });
    describe("View properties", function() {
      it("has a title, uri, etc.", function() {
        expect(showTodoView.getIconName()).toEqual('checklist');
        expect(showTodoView.getURI()).toEqual('atom://todo-show/todos');
        return expect(showTodoView.find('.btn-group')).toExist();
      });
      it("updates view info", function() {
        var count, getInfo;
        getInfo = function() {
          return showTodoView.todoInfo.text();
        };
        count = showTodoView.getTodosCount();
        expect(getInfo()).toBe("Found " + count + " results in workspace");
        showTodoView.collection.search();
        expect(getInfo()).toBe("Found ... results in workspace");
        waitsFor(function() {
          return !showTodoView.isSearching();
        });
        return runs(function() {
          expect(getInfo()).toBe("Found " + count + " results in workspace");
          showTodoView.collection.todos = ['a single todo'];
          showTodoView.updateInfo();
          return expect(getInfo()).toBe("Found 1 result in workspace");
        });
      });
      return it("updates view info details", function() {
        var getInfo;
        getInfo = function() {
          return showTodoView.todoInfo.text();
        };
        collection.setSearchScope('project');
        waitsFor(function() {
          return !showTodoView.isSearching();
        });
        return runs(function() {
          expect(getInfo()).toBe("Found 3 results in project sample1");
          collection.setSearchScope('open');
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            return expect(getInfo()).toBe("Found 0 results in open files");
          });
        });
      });
    });
    return describe("Automatic update of todos", function() {
      it("refreshes on save", function() {
        expect(showTodoView.getTodos()).toHaveLength(3);
        waitsForPromise(function() {
          return atom.workspace.open('temp.txt');
        });
        return runs(function() {
          var editor;
          editor = atom.workspace.getActiveTextEditor();
          editor.setText("# TODO: Test");
          editor.save();
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            expect(showTodoView.getTodos()).toHaveLength(4);
            editor.setText("");
            editor.save();
            waitsFor(function() {
              return !showTodoView.isSearching();
            });
            return runs(function() {
              return expect(showTodoView.getTodos()).toHaveLength(3);
            });
          });
        });
      });
      it("updates on search scope change", function() {
        expect(showTodoView.isSearching()).toBe(false);
        expect(collection.getSearchScope()).toBe('workspace');
        expect(showTodoView.getTodos()).toHaveLength(3);
        expect(collection.toggleSearchScope()).toBe('project');
        expect(showTodoView.isSearching()).toBe(true);
        waitsFor(function() {
          return !showTodoView.isSearching();
        });
        return runs(function() {
          expect(showTodoView.getTodos()).toHaveLength(3);
          expect(collection.toggleSearchScope()).toBe('open');
          expect(showTodoView.isSearching()).toBe(true);
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            expect(showTodoView.getTodos()).toHaveLength(0);
            expect(collection.toggleSearchScope()).toBe('active');
            expect(showTodoView.isSearching()).toBe(true);
            waitsFor(function() {
              return !showTodoView.isSearching();
            });
            return runs(function() {
              expect(showTodoView.getTodos()).toHaveLength(0);
              expect(collection.toggleSearchScope()).toBe('workspace');
              return expect(showTodoView.isSearching()).toBe(true);
            });
          });
        });
      });
      it("handles search scope 'project'", function() {
        atom.project.addPath(sample2Path);
        waitsForPromise(function() {
          return atom.workspace.open(path.join(sample2Path, 'sample.txt'));
        });
        return runs(function() {
          collection.setSearchScope('workspace');
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            expect(showTodoView.getTodos()).toHaveLength(9);
            collection.setSearchScope('project');
            expect(showTodoView.isSearching()).toBe(true);
            waitsFor(function() {
              return !showTodoView.isSearching();
            });
            return runs(function() {
              expect(showTodoView.getTodos()).toHaveLength(6);
              waitsForPromise(function() {
                return atom.workspace.open(path.join(sample1Path, 'sample.c'));
              });
              waitsFor(function() {
                return !showTodoView.isSearching();
              });
              return runs(function() {
                return expect(showTodoView.getTodos()).toHaveLength(3);
              });
            });
          });
        });
      });
      it("handles search scope 'open'", function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample.c');
        });
        waitsFor(function() {
          return !showTodoView.isSearching();
        });
        return runs(function() {
          expect(showTodoView.getTodos()).toHaveLength(3);
          collection.setSearchScope('open');
          expect(showTodoView.isSearching()).toBe(true);
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            expect(showTodoView.getTodos()).toHaveLength(1);
            waitsForPromise(function() {
              return atom.workspace.open('sample.js');
            });
            waitsFor(function() {
              return !showTodoView.isSearching();
            });
            return runs(function() {
              expect(showTodoView.getTodos()).toHaveLength(3);
              atom.workspace.getActivePane().itemAtIndex(0).destroy();
              waitsFor(function() {
                return !showTodoView.isSearching();
              });
              return runs(function() {
                return expect(showTodoView.getTodos()).toHaveLength(2);
              });
            });
          });
        });
      });
      return it("handles search scope 'active'", function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample.c');
        });
        waitsForPromise(function() {
          return atom.workspace.open('sample.js');
        });
        waitsFor(function() {
          return !showTodoView.isSearching();
        });
        return runs(function() {
          expect(showTodoView.getTodos()).toHaveLength(3);
          collection.setSearchScope('active');
          expect(showTodoView.isSearching()).toBe(true);
          waitsFor(function() {
            return !showTodoView.isSearching();
          });
          return runs(function() {
            expect(showTodoView.getTodos()).toHaveLength(2);
            atom.workspace.getActivePane().activateItemAtIndex(0);
            waitsFor(function() {
              return !showTodoView.isSearching();
            });
            return runs(function() {
              return expect(showTodoView.getTodos()).toHaveLength(1);
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/cin_chalic/.atom/packages/todo-show/spec/todo-view-spec.coffee
