"use babel";

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var tern = require('tern');
var infer = require('../node_modules/tern/lib/infer');
var fs = require('fs');
var path = require('path');
var url = require('url');
var glob = require('glob');
var minimatch = require('minimatch');

var Server = (function () {
  function Server(projectRoot, client, manager) {
    _classCallCheck(this, Server);

    process.__tern = tern;
    process.__infer = infer;

    this.manager = manager;

    this.client = client;

    this.projectDir = projectRoot;
    this.distDir = path.resolve(__dirname, '../node_modules/tern');

    this.defaultConfig = {

      libs: [],
      loadEagerly: false,
      plugins: {},
      ecmaScript: true,
      ecmaVersion: 6,
      dependencyBudget: tern.defaultOptions.dependencyBudget
    };

    this.projectFileName = '.tern-project';
    this.portFileName = '.tern-port';
    this.maxIdleTime = 6e4 * 5; // Shut down after five minutes of inactivity

    this.persistent = true;
    this.stripCRs = false;
    this.disableLoadingLocal = false;
    this.verbose = false;
    this.debug = false;
    this.noPortFile = true;
    this.host = '127.0.0.1';
    this.port = 0;
    this.httpServer = null;

    this.getHomeDir();
    this.init();
  }

  _createClass(Server, [{
    key: 'init',
    value: function init() {
      var _this = this;

      if (!this.projectDir) {

        return;
      }

      var config = this.readProjectFile(path.resolve(this.projectDir, this.projectFileName));

      if (!config) {

        config = this.defaultConfig;
      }

      this.httpServer = require('http').createServer(function (req, resp) {

        clearTimeout(_this.shutdown);
        _this.shutdown = setTimeout(_this.doShutdown.bind(_this), _this.maxIdleTime);

        var target = url.parse(req.url, true);

        if (target.pathname == '/ping') {

          return _this.respondSimple(resp, 200, 'pong');
        }

        if (target.pathname != '/') {

          return _this.respondSimple(resp, 404, 'No service at ' + target.pathname);
        }

        if (req.method === 'POST') {

          var body = '';

          req.on('data', function (data) {

            body += data;
          });

          req.on('end', function () {

            _this.respond(resp, body);
          });
        } else if (req.method === 'GET') {

          if (target.query.doc) {

            _this.respond(resp, target.query.doc);
          } else {

            _this.respondSimple(resp, 400, 'Missing query document');
          }
        }
      });

      this.server = this.startServer(this.projectDir, config, this.httpServer);
      this.shutdown = setTimeout(this.doShutdown.bind(this), this.maxIdleTime);

      this.httpServer.listen(this.port, this.host, function () {

        _this.port = _this.httpServer.address().port;
        _this.client.port = _this.port;

        if (!_this.noPortFile) {

          _this.portFile = path.resolve(_this.projectDir, _this.portFileName);
          fs.writeFileSync(_this.portFile, String(_this.port), 'utf8');
        }

        console.log('Listening on port ' + _this.port);
      });
    }
  }, {
    key: 'flush',
    value: function flush() {

      this.server.flush(function () {

        atom.notifications.addInfo('All files fetched an analyzed.');
      });
    }
  }, {
    key: 'getHomeDir',
    value: function getHomeDir() {

      var homeDir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;

      if (homeDir && fs.existsSync(path.resolve(homeDir, '.tern-config'))) {

        this.defaultConfig = this.readProjectFile(path.resolve(homeDir, '.tern-config'));
      }
    }
  }, {
    key: 'readJSON',
    value: function readJSON(fileName) {

      if (this.manager.helper.fileExists(fileName) !== undefined) {

        return false;
      }

      var file = fs.readFileSync(fileName, 'utf8');

      try {

        return JSON.parse(file);
      } catch (e) {

        atom.notifications.addError('Bad JSON in ' + fileName + ': ' + e.message, {

          dismissable: true
        });
        this.destroy();
      }
    }
  }, {
    key: 'readProjectFile',
    value: function readProjectFile(fileName) {

      var data = this.readJSON(fileName);

      if (!data) {

        return false;
      }

      for (var option in this.defaultConfig) if (!data.hasOwnProperty(option)) data[option] = this.defaultConfig[option];
      return data;
    }
  }, {
    key: 'findFile',
    value: function findFile(file, projectDir, fallbackDir) {

      var local = path.resolve(projectDir, file);

      if (!this.disableLoadingLocal && fs.existsSync(local)) {

        return local;
      }

      var shared = path.resolve(fallbackDir, file);

      if (fs.existsSync(shared)) {

        return shared;
      }
    }
  }, {
    key: 'findDefs',
    value: function findDefs(projectDir, config) {

      var defs = [];
      var src = config.libs.slice();

      if (config.ecmaScript) {

        if (src.indexOf('ecma6') == -1 && config.ecmaVersion >= 6) {

          src.unshift('ecma6');
        }

        if (src.indexOf('ecma5') == -1) {

          src.unshift('ecma5');
        }
      }

      for (var i = 0; i < src.length; ++i) {

        var file = src[i];

        if (!/\.json$/.test(file)) {

          file = file + '.json';
        }

        var found = this.findFile(file, projectDir, path.resolve(this.distDir, 'defs'));

        if (!found) {

          try {

            found = require.resolve('tern-' + src[i]);
          } catch (e) {

            atom.notifications.addError('Failed to find library ' + src[i] + '\n', {

              dismissable: true
            });
            continue;
          }
        }

        if (found) {

          defs.push(this.readJSON(found));
        }
      }
      return defs;
    }
  }, {
    key: 'defaultPlugins',
    value: function defaultPlugins(config) {

      var result = ['doc_comment'];
      return result;
    }
  }, {
    key: 'loadPlugins',
    value: function loadPlugins(projectDir, config) {

      var plugins = config.plugins;
      var options = {};

      for (var plugin in plugins) {

        var val = plugins[plugin];

        if (!val) {

          continue;
        }

        var found = this.findFile(plugin + '.js', projectDir, path.resolve(this.distDir, 'plugin'));

        if (!found) {

          try {

            found = require.resolve('tern-' + plugin);
          } catch (e) {}
        }

        if (!found) {

          try {

            found = require.resolve(this.projectDir + '/node_modules/tern-' + plugin);
          } catch (e) {

            atom.notifications.addError('Failed to find plugin ' + plugin + '\n', {

              dismissable: true
            });
            continue;
          }
        }

        var mod = require(found);

        if (mod.hasOwnProperty('initialize')) {

          mod.initialize(this.distDir);
        }

        options[path.basename(plugin)] = val;
      }

      this.defaultPlugins(config).forEach(function (name) {

        if (!plugins.hasOwnProperty(name)) {

          options[name] = true;
        }
      });

      return options;
    }
  }, {
    key: 'startServer',
    value: function startServer(dir, config, httpServer) {

      var defs = this.findDefs(dir, config);
      var plugins = this.loadPlugins(dir, config);
      var server = new tern.Server({

        getFile: function getFile(name, c) {

          if (config.dontLoad && config.dontLoad.some(function (pat) {

            return minimatch(name, pat);
          })) {

            c(null, '');
          } else {

            fs.readFile(path.resolve(dir, name), 'utf8', c);
          }
        },
        normalizeFilename: function normalizeFilename(name) {

          var pt = path.resolve(dir, name);

          try {

            pt = fs.realpathSync(path.resolve(dir, name));
          } catch (e) {

            console.error(e.message);
          }

          return path.relative(dir, pt);
        },
        async: true,
        defs: defs,
        plugins: plugins,
        debug: this.debug,
        projectDir: dir,
        ecmaVersion: config.ecmaVersion,
        dependencyBudget: config.dependencyBudget,
        stripCRs: this.stripCRs,
        parent: { httpServer: this.httpServer }
      });

      if (config.loadEagerly) {

        config.loadEagerly.forEach(function (pat) {

          glob.sync(pat, { cwd: dir }).forEach(function (file) {

            server.addFile(file);
          });
        });
      }

      return server;
    }
  }, {
    key: 'doShutdown',
    value: function doShutdown() {

      if (this.persistent) {

        return;
      }

      console.log('Was idle for ' + Math.floor(this.maxIdleTime / 6e4) + ' minutes. Shutting down.');
      this.destroy();
    }
  }, {
    key: 'respondSimple',
    value: function respondSimple(resp, status, text) {

      resp.writeHead(status, {

        'content-type': 'text/plain; charset=utf-8'
      });

      resp.end(text);

      if (this.verbose) {

        console.log('Response: ' + status + ' ' + text);
      }
    }
  }, {
    key: 'respond',
    value: function respond(resp, doc) {
      var _this2 = this;

      try {

        doc = JSON.parse(doc);
      } catch (e) {

        return this.respondSimple(resp, 400, 'JSON parse error: ' + e.message);
      }

      if (this.verbose) {

        console.log('Request: ' + JSON.stringify(doc, null, 2));
      }

      this.server.request(doc, function (err, data) {

        if (err) {

          return _this2.respondSimple(resp, 400, String(err));
        }

        resp.writeHead(200, {

          'content-type': 'application/json; charset=utf-8'
        });

        if (_this2.verbose) {

          console.log('Response: ' + JSON.stringify(data, null, 2) + ' \n');
        }

        resp.end(JSON.stringify(data));
      });
    }
  }, {
    key: 'destroy',
    value: function destroy() {

      if (this.httpServer) {

        this.httpServer.close();
      }

      try {

        var cur = Number(fs.readFileSync(this.portFile, 'utf8'));

        if (cur === this.port) {

          fs.unlinkSync(this.portFile);
        }
      } catch (e) {}
    }
  }]);

  return Server;
})();

exports['default'] = Server;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/cin_chalic/.atom/packages/atom-ternjs/lib/atom-ternjs-server.js
