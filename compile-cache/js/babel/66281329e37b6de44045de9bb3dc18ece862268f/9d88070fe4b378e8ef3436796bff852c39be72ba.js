'use babel';

var _ref = [];
var workspaceElement = _ref[0];
var editor = _ref[1];
var editorElement = _ref[2];

var path = require('path');

function sharedSetup(useTernLint) {

  atom.project.setPaths([path.join(__dirname, 'fixtures')]);
  atom.config.set('atom-ternjs.lint', useTernLint);
  workspaceElement = atom.views.getView(atom.workspace);

  waitsForPromise(function () {

    return atom.packages.activatePackage('atom-ternjs').then(function (pkg) {

      package = pkg.mainModule;
    });
  });

  waitsForPromise(function () {

    return atom.workspace.open('test.js');
  });

  runs(function () {

    editor = atom.workspace.getActiveTextEditor();
    editorElement = atom.views.getView(editor);
  });
}

describe('atom-ternjs', function () {

  beforeEach(function () {

    sharedSetup(true);
  });

  describe('activate()', function () {

    it('activates atom-ternjs and initializes the autocomplete-plus provider', function () {

      expect(package.provider).toBeDefined();
    });

    it('activates atom-ternjs and initializes the manager', function () {

      expect(package.manager).toBeDefined();
    });

    it('does not provide the linter provider if tern-lint config is set to true', function () {

      expect(package.useLint).toMatch(/true/);
      expect(package.providerLinter).toBeDefined();
    });
  });

  describe('deactivate()', function () {

    beforeEach(function () {

      editor.setCursorBufferPosition([4, 15]);
      atom.packages.deactivatePackage('atom-ternjs');
    });

    it('deactivates atom-ternjs', function () {

      expect(package.manager).toBeUndefined();
      expect(package.provider).toBeUndefined();
      expect(package.useLint).toBeUndefined();
      expect(package.providerLinter).toBeUndefined();
    });

    it('destroys all views', function () {

      expect(workspaceElement.querySelectorAll('atom-ternjs-reference').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-rename').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-config').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-documentation').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-type').length).toBe(0);
      expect(editorElement.querySelectorAll('atom-text-editor::shadow .scroll-view .atom-ternjs-definition-marker').length).toBe(0);
    });
  });
});

describe('atom-ternjs', function () {

  beforeEach(function () {

    sharedSetup(false);
  });

  describe('activate()', function () {

    it('does not provide the linter provider if tern-lint config is set to false', function () {

      expect(package.useLint).toMatch(/false/);
      expect(package.providerLinter).toBeUndefined();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2Npbl9jaGFsaWMvLmF0b20vcGFja2FnZXMvYXRvbS10ZXJuanMvc3BlYy9hdG9tLXRlcm5qcy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQTs7V0FFcUMsRUFBRTtJQUE3QyxnQkFBZ0I7SUFBRSxNQUFNO0lBQUUsYUFBYTs7QUFDNUMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixTQUFTLFdBQVcsQ0FBQyxXQUFXLEVBQUU7O0FBRWhDLE1BQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELE1BQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2pELGtCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTs7QUFFckQsaUJBQWUsQ0FBQyxZQUFNOztBQUVwQixXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUcsRUFBSzs7QUFFaEUsYUFBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILGlCQUFlLENBQUMsWUFBTTs7QUFFcEIsV0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUN2QyxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLFlBQU07O0FBRVQsVUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUM5QyxpQkFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQzVD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RTNCLE1BQUUsQ0FBQywwRUFBMEUsRUFBRSxZQUFNOztBQUVuRixZQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6QyxZQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ2hELENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiIvaG9tZS9jaW5fY2hhbGljLy5hdG9tL3BhY2thZ2VzL2F0b20tdGVybmpzL3NwZWMvYXRvbS10ZXJuanMtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmxldCBbd29ya3NwYWNlRWxlbWVudCwgZWRpdG9yLCBlZGl0b3JFbGVtZW50XSA9IFtdO1xubGV0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmZ1bmN0aW9uIHNoYXJlZFNldHVwKHVzZVRlcm5MaW50KSB7XG5cbiAgYXRvbS5wcm9qZWN0LnNldFBhdGhzKFtwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnKV0pO1xuICBhdG9tLmNvbmZpZy5zZXQoJ2F0b20tdGVybmpzLmxpbnQnLCB1c2VUZXJuTGludCk7XG4gIHdvcmtzcGFjZUVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpXG5cbiAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcblxuICAgIHJldHVybiBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZSgnYXRvbS10ZXJuanMnKS50aGVuKChwa2cpID0+IHtcblxuICAgICAgcGFja2FnZSA9IHBrZy5tYWluTW9kdWxlO1xuICAgIH0pO1xuICB9KTtcblxuICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuXG4gICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLm9wZW4oJ3Rlc3QuanMnKTtcbiAgfSk7XG5cbiAgcnVucygoKSA9PiB7XG5cbiAgICBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk7XG4gICAgZWRpdG9yRWxlbWVudCA9IGF0b20udmlld3MuZ2V0VmlldyhlZGl0b3IpO1xuICB9KTtcbn1cblxuZGVzY3JpYmUoJ2F0b20tdGVybmpzJywgKCkgPT4ge1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuXG4gICAgc2hhcmVkU2V0dXAodHJ1ZSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhY3RpdmF0ZSgpJywgKCkgPT4ge1xuXG4gICAgaXQoJ2FjdGl2YXRlcyBhdG9tLXRlcm5qcyBhbmQgaW5pdGlhbGl6ZXMgdGhlIGF1dG9jb21wbGV0ZS1wbHVzIHByb3ZpZGVyJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS5wcm92aWRlcikudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdhY3RpdmF0ZXMgYXRvbS10ZXJuanMgYW5kIGluaXRpYWxpemVzIHRoZSBtYW5hZ2VyJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS5tYW5hZ2VyKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvZXMgbm90IHByb3ZpZGUgdGhlIGxpbnRlciBwcm92aWRlciBpZiB0ZXJuLWxpbnQgY29uZmlnIGlzIHNldCB0byB0cnVlJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS51c2VMaW50KS50b01hdGNoKC90cnVlLyk7XG4gICAgICBleHBlY3QocGFja2FnZS5wcm92aWRlckxpbnRlcikudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RlYWN0aXZhdGUoKScsICgpID0+IHtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuXG4gICAgICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oWzQsIDE1XSk7XG4gICAgICBhdG9tLnBhY2thZ2VzLmRlYWN0aXZhdGVQYWNrYWdlKCdhdG9tLXRlcm5qcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYWN0aXZhdGVzIGF0b20tdGVybmpzJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS5tYW5hZ2VyKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGFja2FnZS5wcm92aWRlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHBhY2thZ2UudXNlTGludCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHBhY2thZ2UucHJvdmlkZXJMaW50ZXIpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXN0cm95cyBhbGwgdmlld3MnLCAoKSA9PiB7XG5cbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F0b20tdGVybmpzLXJlZmVyZW5jZScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F0b20tdGVybmpzLXJlbmFtZScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F0b20tdGVybmpzLWNvbmZpZycpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F0b20tdGVybmpzLWRvY3VtZW50YXRpb24nKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qod29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhdG9tLXRlcm5qcy10eXBlJykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgZXhwZWN0KGVkaXRvckVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXRvbS10ZXh0LWVkaXRvcjo6c2hhZG93IC5zY3JvbGwtdmlldyAuYXRvbS10ZXJuanMtZGVmaW5pdGlvbi1tYXJrZXInKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdhdG9tLXRlcm5qcycsICgpID0+IHtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcblxuICAgIHNoYXJlZFNldHVwKGZhbHNlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FjdGl2YXRlKCknLCAoKSA9PiB7XG5cbiAgICBpdCgnZG9lcyBub3QgcHJvdmlkZSB0aGUgbGludGVyIHByb3ZpZGVyIGlmIHRlcm4tbGludCBjb25maWcgaXMgc2V0IHRvIGZhbHNlJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS51c2VMaW50KS50b01hdGNoKC9mYWxzZS8pO1xuICAgICAgZXhwZWN0KHBhY2thZ2UucHJvdmlkZXJMaW50ZXIpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
//# sourceURL=/home/cin_chalic/.atom/packages/atom-ternjs/spec/atom-ternjs-spec.js
