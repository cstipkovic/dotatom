function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// var lint = require('../src/linter-jscs');

var _srcLinterJscs = require('../src/linter-jscs');

var _srcLinterJscs2 = _interopRequireDefault(_srcLinterJscs);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';
var sloppyPath = path.join(__dirname, 'files', 'sloppy.js');
var goodPath = path.join(__dirname, 'files', 'good.js');
var emptyPath = path.join(__dirname, 'files', 'empty.js');
var lflPath = path.join(__dirname, 'files', 'long-file-line.js');

describe('The jscs provider for Linter', function () {
  var lint = _srcLinterJscs2['default'].provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return atom.packages.activatePackage('linter-jscs');
    });
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript');
    });
    waitsForPromise(function () {
      return atom.workspace.open(sloppyPath);
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-jscs')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-jscs')).toBe(true);
  });

  describe('checks sloppy.js and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(sloppyPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies the first message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('error');
          expect(messages[0].html).toBeDefined();
          expect(messages[0].html).toEqual('<span class=\'badge badge-flexible\'>requireTrailingComma</span> Missing comma before closing curly brace');
          expect(messages[0].filePath).toBeDefined();
          expect(messages[0].filePath).toMatch(/.+sloppy\.js$/);
          expect(messages[0].range).toBeDefined();
          expect(messages[0].range.length).toEqual(2);
          expect(messages[0].range).toEqual([[2, 11], [2, 12]]);
        });
      });
    });
  });

  it('finds nothing wrong with an empty file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(emptyPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  describe('provides override options and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(sloppyPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('should return no errors if the file is excluded', function () {
      waitsForPromise(function () {
        return lint(editor, {}, { excludeFiles: ['sloppy.js'] }).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });

    it('should return no errors if `requireTrailingComma` is set to null', function () {
      waitsForPromise(function () {
        return lint(editor, {}, { requireTrailingComma: null }).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  describe('save', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(sloppyPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('should fix the file', function () {
      waitsForPromise(function () {
        var tempFile = _temp2['default'].openSync().path;
        editor.saveAs(tempFile);

        return lint(editor, {}, {}, true).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  describe('custom rules', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(lflPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('should throw error for empty function call', function () {
      waitsForPromise(function () {

        var config = {
          additionalRules: [path.join('.', 'spec', 'rules', '*.js')],
          lineLength: 40
        };

        return lint(editor, {}, config).then(function (messages) {
          expect(messages.length).toEqual(1);
          expect(messages[0].html).toEqual('<span class=\'badge badge-flexible\'>lineLength</span> Line must be at most 40 characters');
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/cin_chalic/.atom/packages/linter-jscs/spec/linter-jscs-spec.js
